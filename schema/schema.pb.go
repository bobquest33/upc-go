// Code generated by protoc-gen-go.
// source: github.com/jtremback/upc/schema/schema.proto
// DO NOT EDIT!

/*
Package schema is a generated protocol buffer package.

It is generated from these files:
	github.com/jtremback/upc/schema/schema.proto

It has these top-level messages:
	Channel
	Identity
*/
package schema

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import wire "github.com/jtremback/upc/wire"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Channel_State int32

const (
	Channel_PendingOpen   Channel_State = 0
	Channel_Open          Channel_State = 1
	Channel_PendingClosed Channel_State = 2
	Channel_Closed        Channel_State = 3
)

var Channel_State_name = map[int32]string{
	0: "PendingOpen",
	1: "Open",
	2: "PendingClosed",
	3: "Closed",
}
var Channel_State_value = map[string]int32{
	"PendingOpen":   0,
	"Open":          1,
	"PendingClosed": 2,
	"Closed":        3,
}

func (x Channel_State) String() string {
	return proto.EnumName(Channel_State_name, int32(x))
}
func (Channel_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Channel_Party int32

const (
	Channel_Escrow Channel_Party = 0
	Channel_Party1 Channel_Party = 1
	Channel_Party2 Channel_Party = 2
)

var Channel_Party_name = map[int32]string{
	0: "Escrow",
	1: "Party1",
	2: "Party2",
}
var Channel_Party_value = map[string]int32{
	"Escrow": 0,
	"Party1": 1,
	"Party2": 2,
}

func (x Channel_Party) String() string {
	return proto.EnumName(Channel_Party_name, int32(x))
}
func (Channel_Party) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

type Channel struct {
	ChannelID                []byte          `protobuf:"bytes,1,opt,name=channelID,proto3" json:"channelID,omitempty"`
	State                    Channel_State   `protobuf:"varint,2,opt,name=state,enum=schema.Channel_State" json:"state,omitempty"`
	OpeningTx                *wire.OpeningTx `protobuf:"bytes,3,opt,name=openingTx" json:"openingTx,omitempty"`
	OpeningTxEnvelope        *wire.Envelope  `protobuf:"bytes,4,opt,name=openingTxEnvelope" json:"openingTxEnvelope,omitempty"`
	LastUpdateTx             *wire.UpdateTx  `protobuf:"bytes,5,opt,name=lastUpdateTx" json:"lastUpdateTx,omitempty"`
	LastUpdateTxEnvelope     *wire.Envelope  `protobuf:"bytes,6,opt,name=lastUpdateTxEnvelope" json:"lastUpdateTxEnvelope,omitempty"`
	LastFullUpdateTx         *wire.UpdateTx  `protobuf:"bytes,7,opt,name=lastFullUpdateTx" json:"lastFullUpdateTx,omitempty"`
	LastFullUpdateTxEnvelope *wire.Envelope  `protobuf:"bytes,8,opt,name=lastFullUpdateTxEnvelope" json:"lastFullUpdateTxEnvelope,omitempty"`
	Identity0                *Identity       `protobuf:"bytes,9,opt,name=identity0" json:"identity0,omitempty"`
	Identity1                *Identity       `protobuf:"bytes,10,opt,name=identity1" json:"identity1,omitempty"`
	Identity2                *Identity       `protobuf:"bytes,11,opt,name=identity2" json:"identity2,omitempty"`
	Me                       Channel_Party   `protobuf:"varint,12,opt,name=me,enum=schema.Channel_Party" json:"me,omitempty"`
}

func (m *Channel) Reset()                    { *m = Channel{} }
func (m *Channel) String() string            { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()               {}
func (*Channel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Channel) GetOpeningTx() *wire.OpeningTx {
	if m != nil {
		return m.OpeningTx
	}
	return nil
}

func (m *Channel) GetOpeningTxEnvelope() *wire.Envelope {
	if m != nil {
		return m.OpeningTxEnvelope
	}
	return nil
}

func (m *Channel) GetLastUpdateTx() *wire.UpdateTx {
	if m != nil {
		return m.LastUpdateTx
	}
	return nil
}

func (m *Channel) GetLastUpdateTxEnvelope() *wire.Envelope {
	if m != nil {
		return m.LastUpdateTxEnvelope
	}
	return nil
}

func (m *Channel) GetLastFullUpdateTx() *wire.UpdateTx {
	if m != nil {
		return m.LastFullUpdateTx
	}
	return nil
}

func (m *Channel) GetLastFullUpdateTxEnvelope() *wire.Envelope {
	if m != nil {
		return m.LastFullUpdateTxEnvelope
	}
	return nil
}

func (m *Channel) GetIdentity0() *Identity {
	if m != nil {
		return m.Identity0
	}
	return nil
}

func (m *Channel) GetIdentity1() *Identity {
	if m != nil {
		return m.Identity1
	}
	return nil
}

func (m *Channel) GetIdentity2() *Identity {
	if m != nil {
		return m.Identity2
	}
	return nil
}

type Identity struct {
	Name     string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Pubkey   []byte   `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Privkey  []byte   `protobuf:"bytes,3,opt,name=privkey,proto3" json:"privkey,omitempty"`
	Channels [][]byte `protobuf:"bytes,4,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (m *Identity) Reset()                    { *m = Identity{} }
func (m *Identity) String() string            { return proto.CompactTextString(m) }
func (*Identity) ProtoMessage()               {}
func (*Identity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Channel)(nil), "schema.Channel")
	proto.RegisterType((*Identity)(nil), "schema.Identity")
	proto.RegisterEnum("schema.Channel_State", Channel_State_name, Channel_State_value)
	proto.RegisterEnum("schema.Channel_Party", Channel_Party_name, Channel_Party_value)
}

var fileDescriptor0 = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x93, 0xdf, 0x6e, 0x94, 0x40,
	0x14, 0xc6, 0xdd, 0x3f, 0xb0, 0x70, 0x16, 0x5b, 0x7a, 0xa2, 0x66, 0xd2, 0x78, 0x61, 0x48, 0x4c,
	0x9a, 0xa8, 0xac, 0x8b, 0x77, 0xc6, 0x1b, 0xad, 0x35, 0xa9, 0x37, 0x36, 0xa3, 0x3e, 0x00, 0x7f,
	0x26, 0x5d, 0x2c, 0x0c, 0x04, 0x86, 0xd6, 0xbe, 0xb1, 0x8f, 0xe1, 0x30, 0x0c, 0x2c, 0x5a, 0x9a,
	0xde, 0xec, 0x9e, 0xf3, 0x9d, 0xdf, 0xc7, 0x77, 0x12, 0x0e, 0xf0, 0xfa, 0x32, 0x15, 0xbb, 0x26,
	0xf2, 0xe3, 0x22, 0xdf, 0xfc, 0x12, 0x15, 0xcb, 0xa3, 0x30, 0xbe, 0xda, 0x34, 0x65, 0xbc, 0xa9,
	0xe3, 0x1d, 0xcb, 0x43, 0xfd, 0xe7, 0x97, 0x55, 0x21, 0x0a, 0x34, 0xbb, 0xee, 0xf8, 0xe4, 0x5e,
	0xd7, 0x4d, 0x5a, 0x31, 0xf5, 0xd3, 0x39, 0xbc, 0x3f, 0x06, 0xac, 0x4e, 0x77, 0x21, 0xe7, 0x2c,
	0xc3, 0xe7, 0x60, 0xc7, 0x5d, 0x79, 0xfe, 0x99, 0xcc, 0x5e, 0xcc, 0x4e, 0x1c, 0xba, 0x17, 0xf0,
	0x15, 0x18, 0xb5, 0x08, 0x05, 0x23, 0x73, 0x39, 0x39, 0x08, 0x9e, 0xfa, 0x3a, 0x59, 0xbb, 0xfd,
	0xef, 0xed, 0x90, 0x76, 0x0c, 0xbe, 0x01, 0xbb, 0x28, 0x19, 0x4f, 0xf9, 0xe5, 0x8f, 0xdf, 0x64,
	0x21, 0x0d, 0xeb, 0xe0, 0xd0, 0x57, 0xb1, 0xdf, 0x7a, 0x99, 0xee, 0x09, 0xfc, 0x00, 0x47, 0x43,
	0x73, 0xc6, 0xaf, 0x59, 0x26, 0x3b, 0xb2, 0x54, 0xb6, 0x83, 0xce, 0xd6, 0xab, 0xf4, 0x2e, 0x88,
	0x01, 0x38, 0x59, 0x58, 0x8b, 0x9f, 0x65, 0x22, 0xa3, 0x65, 0x9e, 0x31, 0x36, 0xf6, 0x2a, 0xfd,
	0x87, 0xc1, 0x4f, 0xf0, 0x64, 0xdc, 0x0f, 0xa1, 0xe6, 0x64, 0xe8, 0x24, 0x8b, 0xef, 0xc1, 0x6d,
	0xf5, 0x2f, 0x4d, 0x96, 0x0d, 0xd9, 0xab, 0xc9, 0xec, 0x3b, 0x1c, 0x7e, 0x05, 0xf2, 0xbf, 0x36,
	0xec, 0x60, 0x4d, 0xee, 0x70, 0x2f, 0x8f, 0x3e, 0xd8, 0x69, 0xc2, 0xb8, 0x48, 0xc5, 0xed, 0x5b,
	0x62, 0x2b, 0xb3, 0xdb, 0xbf, 0x9d, 0x73, 0x3d, 0xa0, 0x7b, 0x64, 0xcc, 0x6f, 0x09, 0x3c, 0xc4,
	0x6f, 0xc7, 0x7c, 0x40, 0xd6, 0x0f, 0xf1, 0x01, 0xbe, 0x84, 0x79, 0xce, 0x88, 0x33, 0x7d, 0x26,
	0x17, 0x61, 0x25, 0x69, 0x09, 0x78, 0x1f, 0xc1, 0x50, 0x37, 0x83, 0x87, 0xb0, 0xbe, 0x60, 0x3c,
	0x91, 0x2f, 0xb5, 0x3d, 0x0e, 0xf7, 0x11, 0x5a, 0xb0, 0x54, 0xd5, 0x0c, 0x8f, 0xe0, 0xb1, 0x1e,
	0x9d, 0x66, 0x45, 0xcd, 0x12, 0x77, 0x8e, 0x00, 0xa6, 0xae, 0x17, 0x9e, 0xbc, 0x49, 0xf5, 0xbc,
	0x56, 0x3c, 0xab, 0xe3, 0xaa, 0xb8, 0x91, 0x6e, 0x59, 0x2b, 0x71, 0x2b, 0xfd, 0x7d, 0x1d, 0xb8,
	0x73, 0x2f, 0x03, 0xab, 0xdf, 0x16, 0x11, 0x96, 0x3c, 0x94, 0x4b, 0xb6, 0x57, 0x6e, 0x53, 0x55,
	0xe3, 0x33, 0x30, 0xcb, 0x26, 0xba, 0x62, 0xb7, 0xea, 0xc2, 0x1d, 0xaa, 0x3b, 0x24, 0xb0, 0x2a,
	0xab, 0xf4, 0xba, 0x1d, 0x2c, 0xd4, 0xa0, 0x6f, 0xf1, 0x18, 0x2c, 0xfd, 0x7d, 0xd4, 0xf2, 0x5a,
	0x17, 0x72, 0x34, 0xf4, 0x91, 0xa9, 0xbe, 0xaf, 0x77, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x2f,
	0x86, 0x86, 0x87, 0xc1, 0x03, 0x00, 0x00,
}
